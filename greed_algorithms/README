activity_selection*
	run it: make
			./activity_selection_test
这应该算是最简单的贪心算法了，不过贪心相对动态规划都要容易一些
有些C++语法的问题需要注意
1. 直接这样赋值Activity a[] = {{1, 4}}; 会引起警告
	extended initializer lists only available with -std=c++0x or -std=gnu++0x
2. 申明一个类是另一个类的friend，没必要用书上讲的下面这三步，其中第一步去掉是没问题的
	class A;
	class B{ friend class A};
	class B{};

===================================================

huffman_code*
	run it:make
		./huffman_code_test
1. 此算法理解起来很容易，在实现上面需要一个简单的二叉树和一个最小优先队列。最小优先队列没有单独实现，用一个数组模拟了一下，效率不是很高（真正实现的时候用了最小堆，所以查找是O(1), 而我这里是O(n)，因为我不需要插入，只需删除，删除的效率一样，而且总的节点较少，所以不算很影响）
2. 此算法关于内存的释放容易引起的隐藏bug，程序在构建huffman tree的时候，会在堆里面new新的节点，而最后在释放内存的时候，如果只是释放初始数组，delete []tree，会把新申请的内存漏掉，造成内存。尝试了两种办法解决次问题：
	a,在最后够在huffman树里从下往上的递归删除每一个节点，这样是不行的，因为树的部分节点是按照数组的形式存储的，不能delete数组的某一个元素，只能delete数组的所有元素。
	b,把新new的节点指针放在vector里面，最后统一delete，可以工作。
