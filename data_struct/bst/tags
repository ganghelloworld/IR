!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
NUM	te.cpp	/^static const int NUM = 11;$/;"	v	file:
NUM	test.cpp	/^static const int NUM = 11;$/;"	v	file:
Node	bst.h	/^	Node(){};$/;"	f	class:Node	access:public	signature:()
Node	bst.h	/^	Node(T d, Node* p = 0, Node* l = 0, Node* r = 0) :$/;"	f	class:Node	access:public	signature:(T d, Node* p = 0, Node* l = 0, Node* r = 0)
Node	bst.h	/^class Node$/;"	c
Node	test.cpp	/^	Node(){};$/;"	f	class:Node	access:public	signature:()
Node	test.cpp	/^	Node(T d, Node* p = 0, Node* l = 0, Node* r = 0) :$/;"	f	class:Node	access:public	signature:(T d, Node* p = 0, Node* l = 0, Node* r = 0)
Node	test.cpp	/^class Node$/;"	c	file:
Node::Node	bst.h	/^	Node(){};$/;"	f	class:Node	access:public	signature:()
Node::Node	bst.h	/^	Node(T d, Node* p = 0, Node* l = 0, Node* r = 0) :$/;"	f	class:Node	access:public	signature:(T d, Node* p = 0, Node* l = 0, Node* r = 0)
Node::Node	test.cpp	/^	Node(){};$/;"	f	class:Node	access:public	signature:()
Node::Node	test.cpp	/^	Node(T d, Node* p = 0, Node* l = 0, Node* r = 0) :$/;"	f	class:Node	access:public	signature:(T d, Node* p = 0, Node* l = 0, Node* r = 0)
Node::data	bst.h	/^	T data;$/;"	m	class:Node	access:public
Node::data	test.cpp	/^	T data;$/;"	m	class:Node	file:	access:public
Node::left	bst.h	/^	Node* left;$/;"	m	class:Node	access:public
Node::left	test.cpp	/^	Node* left;$/;"	m	class:Node	file:	access:public
Node::parent	bst.h	/^	Node* parent;$/;"	m	class:Node	access:public
Node::parent	test.cpp	/^	Node* parent;$/;"	m	class:Node	file:	access:public
Node::right	bst.h	/^	Node* right;$/;"	m	class:Node	access:public
Node::right	test.cpp	/^	Node* right;$/;"	m	class:Node	file:	access:public
data	bst.h	/^	T data;$/;"	m	class:Node	access:public
data	test.cpp	/^	T data;$/;"	m	class:Node	file:	access:public
in_order	bst.h	/^	void in_order()$/;"	f	class:myBST	access:public	signature:()
in_order	test.cpp	/^	void in_order()$/;"	f	class:myBST	access:public	signature:()
in_order_tree_walk	bst.h	/^	void in_order_tree_walk(Node<T> * node)$/;"	f	class:myBST	access:public	signature:(Node<T> * node)
in_order_tree_walk	test.cpp	/^	void in_order_tree_walk(Node<T> * node)$/;"	f	class:myBST	access:public	signature:(Node<T> * node)
insert	bst.h	/^	void insert(T z)$/;"	f	class:myBST	access:private	signature:(T z)
insert	test.cpp	/^	void insert(T z)$/;"	f	class:myBST	file:	access:private	signature:(T z)
left	bst.h	/^	Node* left;$/;"	m	class:Node	access:public
left	test.cpp	/^	Node* left;$/;"	m	class:Node	file:	access:public
main	te.cpp	/^int main()$/;"	f	signature:()
main	test.cpp	/^int main()$/;"	f	signature:()
myBST	bst.h	/^	myBST(){ std::cout << "b";};$/;"	f	class:myBST	access:public	signature:()
myBST	bst.h	/^	myBST(T* a, int length)$/;"	f	class:myBST	access:public	signature:(T* a, int length)
myBST	bst.h	/^class myBST$/;"	c
myBST	te.cpp	/^	myBST(){ std::cout << "b";};$/;"	f	class:myBST	access:public	signature:()
myBST	te.cpp	/^	myBST(T* a, int length)$/;"	f	class:myBST	access:public	signature:(T* a, int length)
myBST	te.cpp	/^class myBST$/;"	c	file:
myBST	test.cpp	/^	myBST(){ std::cout << "b";};$/;"	f	class:myBST	access:public	signature:()
myBST	test.cpp	/^	myBST(T* a, int length)$/;"	f	class:myBST	access:public	signature:(T* a, int length)
myBST	test.cpp	/^class myBST$/;"	c	file:
myBST::in_order	bst.h	/^	void in_order()$/;"	f	class:myBST	access:public	signature:()
myBST::in_order	test.cpp	/^	void in_order()$/;"	f	class:myBST	access:public	signature:()
myBST::in_order_tree_walk	bst.h	/^	void in_order_tree_walk(Node<T> * node)$/;"	f	class:myBST	access:public	signature:(Node<T> * node)
myBST::in_order_tree_walk	test.cpp	/^	void in_order_tree_walk(Node<T> * node)$/;"	f	class:myBST	access:public	signature:(Node<T> * node)
myBST::insert	bst.h	/^	void insert(T z)$/;"	f	class:myBST	access:private	signature:(T z)
myBST::insert	test.cpp	/^	void insert(T z)$/;"	f	class:myBST	file:	access:private	signature:(T z)
myBST::myBST	bst.h	/^	myBST(){ std::cout << "b";};$/;"	f	class:myBST	access:public	signature:()
myBST::myBST	bst.h	/^	myBST(T* a, int length)$/;"	f	class:myBST	access:public	signature:(T* a, int length)
myBST::myBST	te.cpp	/^	myBST(){ std::cout << "b";};$/;"	f	class:myBST	access:public	signature:()
myBST::myBST	te.cpp	/^	myBST(T* a, int length)$/;"	f	class:myBST	access:public	signature:(T* a, int length)
myBST::myBST	test.cpp	/^	myBST(){ std::cout << "b";};$/;"	f	class:myBST	access:public	signature:()
myBST::myBST	test.cpp	/^	myBST(T* a, int length)$/;"	f	class:myBST	access:public	signature:(T* a, int length)
myBST::root	bst.h	/^	Node<T>* root;$/;"	m	class:myBST	access:private
myBST::root	test.cpp	/^	Node<T>* root;$/;"	m	class:myBST	file:	access:private
myBST_H	bst.h	2;"	d
parent	bst.h	/^	Node* parent;$/;"	m	class:Node	access:public
parent	test.cpp	/^	Node* parent;$/;"	m	class:Node	file:	access:public
right	bst.h	/^	Node* right;$/;"	m	class:Node	access:public
right	test.cpp	/^	Node* right;$/;"	m	class:Node	file:	access:public
root	bst.h	/^	Node<T>* root;$/;"	m	class:myBST	access:private
root	test.cpp	/^	Node<T>* root;$/;"	m	class:myBST	file:	access:private
